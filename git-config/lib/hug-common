# shellcheck shell=bash
# This file is a library to be sourced by shell scripts
#
# HUG-COMMON: Common utilities library
#
# This library provides general-purpose utility functions including:
# - Color definitions for terminal output
# - Output and user interaction functions (error, warning, info, success, prompts)
# - String manipulation utilities
# - Array manipulation utilities  
# - File system utilities
# - Command pattern helpers
#
# These functions are used across all hug commands for consistent
# user experience and error handling.

################################################################################
# Standard Command Script Header Pattern
################################################################################
#
# All hug command scripts should follow this standard pattern:
#
# #!/usr/bin/env bash
# CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"
# CMD_BASE="$(dirname "$CMD_BASE")"
# # shellcheck source=../lib/hug-common
# . "$CMD_BASE/../lib/hug-common"
# # shellcheck source=../lib/hug-git-kit
# . "$CMD_BASE/../lib/hug-git-kit"
# set -euo pipefail  # Exit on error, undefined vars, pipe failures
#
# This ensures:
# - Proper library path resolution (works with symlinks)
# - Sourcing of common functions
# - Strict error handling (fail fast on errors)
# - ShellCheck can follow the source directives
#
################################################################################

################################################################################
# Color Definitions
################################################################################
# Declared and assigned separately to avoid masking tput return values (SC2155)
# Exported so they can be used in sourced scripts without SC2034 warnings
RED=''
GREEN=''
GREEN_BRIGHT=''
YELLOW=''
YELLOW_BRIGHT=''
BLUE=''
MAGENTA=''
CYAN=''
GREY=''
NC=''

test -t 1 && {
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  GREEN_BRIGHT=$(tput setaf 10)
  YELLOW=$(tput setaf 3)
  YELLOW_BRIGHT=$(tput setaf 11)
  BLUE=$(tput setaf 4)
  MAGENTA=$(tput setaf 5)
  CYAN=$(tput setaf 6)
  GREY=$(tput setaf 8)
  NC=$(tput sgr0) # No Color
}

readonly RED GREEN GREEN_BRIGHT YELLOW YELLOW_BRIGHT BLUE MAGENTA CYAN GREY NC
export RED GREEN GREEN_BRIGHT YELLOW YELLOW_BRIGHT BLUE MAGENTA CYAN GREY NC

################################################################################
# Output and User Interaction Functions
################################################################################

# Prints an error message and exits the script
# Usage: error "message" [exit_code]
# Parameters:
#   $1 - Error message to display
#   $2 - (Optional) Exit code, defaults to 1
# Environment:
#   HUG_QUIET - If set, suppresses output
error() {
  test "${HUG_QUIET:-}" && return
  printf "${RED}❌ Error:${NC} %s\n" "$1" >&2
  exit "${2:-1}"
}

# Prints a warning message to stderr
# Usage: warning "message"
# Parameters:
#   $1 - Warning message to display
# Environment:
#   HUG_QUIET - If set, suppresses output
warning() {
  test "${HUG_QUIET:-}" && return
  printf "${YELLOW}⚠️  Warning:${NC} %s\n" "$1" >&2
}

# Alias for warning() function
# Usage: warn "message"
warn() { warning "$@"; }

# Prints an informational message to stderr
# Usage: info "message"
# Parameters:
#   $1 - Information message to display
# Environment:
#   HUG_QUIET - If set, suppresses output
info() {
  test "${HUG_QUIET:-}" && return
  printf "${BLUE}ℹ️  Info:${NC} %s\n" "$1" >&2
}

# Prints a standardized message when no changes are detected
# Usage: print_nothing_to_do "action" ["scope phrase"]
# Examples:
#   print_nothing_to_do "discard"
#   print_nothing_to_do "zap" "in the repository."
# The scope phrase should include any desired trailing punctuation.
print_nothing_to_do() {
  local action="$1"
  local scope="${2:-for the selected scope.}"
  info "Nothing to ${action}; repository already clean ${scope}"
}

# Prints an informational dry-run preview message (shared across commands)
# Usage: print_dry_run_preview "discarded" "from the specified paths."
print_dry_run_preview() {
  local action_phrase="$1"
  local scope="${2:-for the selected scope.}"
  info "Dry run: the following items would ${action_phrase} ${scope} (no changes applied)."
}

# Prints a warning preview message before executing a destructive action
# Usage: print_action_preview "discard the listed changes" "from the specified paths."
print_action_preview() {
  local action_phrase="$1"
  local scope="${2:-for the selected scope.}"
  warning "⚠ About to ${action_phrase} ${scope} Review the list below."
}

# Prints a tip message to stderr
# Usage: tip "message"
# Parameters:
#   $1 - Tip message to display
# Environment:
#   HUG_QUIET - If set, suppresses output
tip() {
  test "${HUG_QUIET:-}" && return
  printf "${CYAN}💡  Tip:${NC} %s\n" "$1" >&2
}

# Prints a success message to stderr
# Usage: success "message"
# Parameters:
#   $1 - Success message to display
# Environment:
#   HUG_QUIET - If set, suppresses output
success() {
  test "${HUG_QUIET:-}" && return
  printf "${GREEN}✅ Success:${NC} %s\n" "$1" >&2
}

# Prompts user for confirmation, exits if not confirmed
# Usage: prompt_confirm ["custom prompt"]
# Parameters:
#   $1 - (Optional) Custom prompt text, defaults to "Proceed? [y/N]: "
# Environment:
#   HUG_FORCE - If true, automatically confirms without prompting
# Returns:
#   0 if confirmed (or HUG_FORCE is true)
#   Exits with code 1 if user declines or read fails
prompt_confirm() {
  if [[ ${HUG_FORCE:-} == true ]]; then
    return 0
  fi
  local prompt="${1:-Proceed? [y/N]: }"
  local response
  printf '%s' "$prompt" >&2
  if ! read -r response; then
    info "Cancelled."
    exit 1
  fi
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    info "Cancelled."
    exit 1
  fi
}

################################################################################
# String Manipulation Functions
################################################################################

# Trims leading and trailing whitespace from a string
# Usage: result=$(trim_message "  text  ")
# Parameters:
#   $1 - String to trim
# Output:
#   Trimmed string to stdout
trim_message() {
  printf '%s' "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

################################################################################
# Array Manipulation Functions
################################################################################

# Removes duplicate entries from an array in-place
# Usage: dedupe_array array_name
# Parameters:
#   $1 - Name of the array variable to deduplicate (nameref)
# Note:
#   Modifies the array in-place, preserving order of first occurrence
#   Empty strings are filtered out
dedupe_array() {
  local -n __array_ref=$1
  local -A __seen=()
  local -a __unique=()
  local item
  for item in "${__array_ref[@]}"; do
    [[ -z "$item" ]] && continue
    if [[ -z "${__seen[$item]+_}" ]]; then
      __seen["$item"]=1
      __unique+=("$item")
    fi
  done
  __array_ref=("${__unique[@]}")
}

# Prints a titled list of items
# Usage: print_list "Title" item1 item2 item3...
# Parameters:
#   $1 - Title for the list
#   $@ - Items to list (remaining arguments)
# Output:
#   Title with count, followed by indented items
print_list() {
  local title=$1
  shift
  printf '%s (%d):\n' "$title" "$#"
  local item
  for item in "$@"; do
    printf '  %s\n' "$item"
  done
}

################################################################################
# File System Utility Functions
################################################################################

# Checks if a local file path is a symlink
# Usage: if is_symlink "path/to/file"; then ...; fi
# Parameters:
#   $1 - Path to check
# Returns:
#   0 if path is a symbolic link, 1 otherwise
is_symlink() {
  local local_file="$1"
  [[ -L "$local_file" ]]
}

################################################################################
# Command Pattern Helpers
################################################################################

# Parses common option flags for command scripts
# Usage: eval "$(parse_common_flags "$@")"
# Recognizes flags:
#   --dry-run    Sets dry_run=true
#   -f, --force  Sets force=true, exports HUG_FORCE=true
#   --quiet      Exports HUG_QUIET=T
#   -h, --help   Calls usage or show_help function and exits
# Note:
#   Consumes recognized flags from arguments
#   Remaining args can be accessed via "$@" after eval
#   Handles empty remaining args without setting $@ to ("")
parse_common_flags() {
  local remaining_args=()
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dry-run)
        echo "dry_run=true"
        shift
        ;;
      -f|--force)
        echo "force=true"
        echo "export HUG_FORCE=true"
        shift
        ;;
      --quiet)
        echo "export HUG_QUIET=T"
        shift
        ;;
      -h|--help)
        echo "if declare -f usage >/dev/null; then usage; elif declare -f show_help >/dev/null; then show_help; fi; exit 0"
        shift
        ;;
      --)
        shift
        remaining_args+=("$@")
        break
        ;;
      *)
        remaining_args+=("$1")
        shift
        ;;
    esac
  done
  
  # Always output set -- to properly update $@ in the caller
  if [ ${#remaining_args[@]} -gt 0 ]; then
    printf 'set -- '
    printf '%q ' "${remaining_args[@]}"
    printf '\n'
  else
    printf 'set --\n'
  fi
}

# Validates minimum number of arguments
# Usage: require_args N ["error message"]
# Parameters:
#   $1 - Minimum number of arguments required
#   $2 - (Optional) Custom error message
# Environment:
#   Uses $# from caller's context
# Note:
#   This is meant to be called with: require_args N "$#" ["message"]
require_args() {
  local required="$1"
  local actual="$2"
  local message="${3:-this command requires at least $required argument(s)}"
  
  if [[ $actual -lt $required ]]; then
    error "$message"
  fi
}

# Confirms an action with a specific word
# Usage: confirm_action "action_word"
# Parameters:
#   $1 - Word that user must type to confirm
# Environment:
#   HUG_FORCE - If true, skips confirmation
# Returns:
#   0 if confirmed (or HUG_FORCE is true)
#   Exits with code 1 if user declines
confirm_action() {
  if [[ ${HUG_FORCE:-} == true ]]; then
    return 0
  fi
  
  local action="$1"
  local reply
  printf 'Type "%s" to confirm: ' "$action" >&2
  if ! read -r reply; then
    info "Cancelled."
    exit 1
  fi
  if [[ "$reply" != "$action" ]]; then
    info "Cancelled."
    exit 1
  fi
}
