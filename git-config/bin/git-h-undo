#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done
set -euo pipefail  # Exit on error, undefined vars, pipe failures
# Part of the Hug tool suite

show_help() {
    cat << EOF
h undo: Make HEAD walk back some commits while keeping their changes unstaged. Uncommitted changes are preserved.

USAGE:
    hug h undo [N|COMMIT] [-u, --upstream] [--quiet] [--force]

OPTIONS:
    -u, --upstream  Sets the target to upstream remote tip after read-only preview/confirmation (discards local-only commits; no fetch)
    --quiet         Suppress output (sets HUG_QUIET=T)
    --force         Skip confirmation prompts (use with caution)

DESCRIPTION:
    Moves HEAD to target. With -u, runs a read-only preview/confirmation before discarding local-only commits to sync with remote tip.

EXAMPLES:
    # Uncommitted changes are preserved in all examples below:
    hug h undo -u                # Moves HEAD to upstream, keep local changes unstaged
    hug h undo 3                 # Moves HEAD last 3 commits
    hug h undo a1b2c3            # Moves HEAD after specified commit
    hug h undo 3 --force         # Skip confirmation

SEE ALSO:
    hug h back    Make HEAD walk back some commits while keeping their changes staged
EOF
}

# Parse common flags (--quiet, --force, -h|--help)
eval "$(parse_common_flags "$@")"

# Parse custom flags
upstream=false
target_arg=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -u|--upstream) upstream=true; shift ;;
    *) target_arg="$1"; shift ;;
  esac
done

if $upstream && [[ -n "$target_arg" ]]; then
  error "Cannot specify both --upstream and a target (N|COMMIT)."
fi

check_git_repo

if $upstream; then
  # handle_upstream_operation performs a read-only preview/confirmation and echoes the upstream commit.
  if [[ ${HUG_FORCE:-} == true ]]; then
    target=$(handle_upstream_operation "undoing")
  elif has_staged_changes || has_unstaged_changes; then
    target=$(handle_upstream_operation "undoing")
  else
    info "No staged or unstaged changes detected; skipping confirmation."
    target=$(HUG_FORCE=true handle_upstream_operation "undoing")
  fi
else
  target=$(resolve_head_target "${target_arg:-}" 'HEAD~1')
  handle_standard_operation "undo" "$target"

  should_prompt=true
  if [[ ${HUG_FORCE:-} == true ]]; then
    should_prompt=false
  elif ! has_staged_changes && ! has_unstaged_changes; then
    should_prompt=false
    info "No staged or unstaged changes detected; skipping confirmation."
  fi

  if $should_prompt; then
    prompt_confirm "Undo commits back to $(git rev-parse --short "$target")? [y/N]: "
  fi
fi

git reset --mixed "$target"
info "Moved HEAD back to $target to undo commits (uncommitted changes preserved)."
