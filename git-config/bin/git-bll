#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done # Load common constants and functions
set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Part of the Hug tool suite

show_help() {
  cat <<'EOF'
hug bll: List local branches in long format, showing short hash, upstream tracking info, and commit message title for each.

USAGE:
  hug bll [OPTIONS]

OPTIONS:
  -h, --help     Show this help message and exit.

DESCRIPTION:
  Displays each local branch sorted alphabetically. The current branch is highlighted in green and marked with an asterisk (*).
  Each entry shows: branch name (short hash) [upstream tracking info, e.g., origin/main ahead 2].
  The commit message title follows.
  Remote tracking information is shown just as in 'git branch -vv'.

EXAMPLES:
  hug bll    # List all local branches in long format

SEE ALSO:
  hug b : For switching branches

FURTHER READING:
EOF
}

# Early exit if not in Git repo
check_git_repo

usage_error() {
  printf 'hug bll: %s\n\n' "$1" >&2
  show_help >&2
  exit 1
}

# Simple arg parsing: handle --help, no other args expected
while (($#)); do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      usage_error "Unknown option: $1"
      ;;
  esac
  shift
done

# Compute branch details
declare -a branches=() hashes=() subjects=() tracks=()
max_len=""
current_branch=""
if ! compute_local_branch_details branches hashes subjects tracks max_len current_branch; then
  printf "No local branches found.\n" >&2
  exit 1
fi

# Print non-interactive list
print_branch_list branches hashes subjects tracks "$max_len" "$current_branch"
