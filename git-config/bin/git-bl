#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done # Load common constants and functions
set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Part of the Hug tool suite

show_help() {
  cat <<'EOF'
hug bl: List local branches in short format, showing short hash, upstream tracking info.

USAGE:
  hug bl [OPTIONS]

OPTIONS:
  -h, --help     Show this help message and exit.

DESCRIPTION:
  Displays each local branch sorted alphabetically. The current branch is highlighted in green and marked with an asterisk (*).
  Each entry shows: branch name (short hash) [upstream tracking info, e.g., origin/main ahead 2].
  Remote tracking information is shown just as in 'git branch -vv'.

EXAMPLES:
  hug bl    # List all local branches in short format

SEE ALSO:
  hug bll : For listing local branches in long form
  hug b   : For switching branches
EOF
}

# Parse common flags
eval "$(parse_common_flags "$@")"

test $# -gt 0 && {
  show_help
  echo "Error: Arguments not expected: $*"
  exit 1
}

# Early exit if not in Git repo
check_git_repo

# Compute branch details
declare -a branches=() hashes=() subjects=() tracks=()
max_len=""
current_branch=""
if ! compute_local_branch_details current_branch max_len hashes branches tracks subjects false; then
  printf "No local branches found.\n" >&2
  exit 1
fi

# Print non-interactive list
print_branch_list "$current_branch" "$max_len" hashes branches tracks subjects
