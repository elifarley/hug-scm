#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done
set -euo pipefail  # Exit on error, undefined vars, pipe failures
# Part of the Hug tool suite

show_help() {
    cat << EOF
hug h back: Moves HEAD back but keep their changes staged.

USAGE:
    hug h back [N|COMMIT] [-u, --upstream] [--quiet]

OPTIONS:
    -u, --upstream  Sets the target to the upstream remote tip after read-only preview/confirmation (discards local-only commits; no fetch)
    --quiet         Suppress output (sets HUG_QUIET=T)

DESCRIPTION:
    Moves HEAD to target. With -u, runs a read-only preview/confirmation before discarding local-only commits to sync with remote tip.

EXAMPLES:
    hug h back -u                # Moves HEAD to upstream, keep local changes staged
    hug h back 3                 # Moves HEAD back 3 commits
    hug h back a1b2c3            # Moves HEAD to specified commit

SEE ALSO:
    hug h undo    Mixed reset (keep changes unstaged)
EOF
}

upstream=false
target_arg=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) show_help; exit 1 ;;
    -u|--upstream) upstream=true; shift ;;
    --quiet) HUG_QUIET=T; shift ;;
    *) target_arg="$1"; shift ;;
  esac
done

if $upstream && [[ -n "$target_arg" ]]; then
  error "Cannot specify both --upstream and a target (N|COMMIT)."
fi

check_git_repo

if $upstream; then
  # handle_upstream_operation performs a read-only preview/confirmation and echoes the upstream commit.
  target=$(handle_upstream_operation "soft resetting" "y/N" "soft reset to upstream and keep changes staged")
else
  target=$(resolve_head_target "${target_arg:-}" 'HEAD~1')
fi

git reset --soft "$target"
info "Soft reset to $target complete."

