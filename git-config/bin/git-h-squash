#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done
set -euo pipefail  # Exit on error, undefined vars, pipe failures
# Part of the Hug tool suite

show_help() {
    cat << EOF
hug h squash: Squashes specific commits into 1 with original HEAD message.

USAGE:
    hug h squash [--quiet] [target]

OPTIONS:
    [target]        Either empty, an integer N > 1, a COMMIT hash, or -u, --upstream
        (empty)         The last 2 commits will be squashed.
        N               The last N commits will be squashed.
        COMMIT          All commits above the target commit will be squashed.
        -u, --upstream  Local-only commits (those above the upstream HEAD - the remote tip) will be squashed after read-only preview/confirmation (no fetch)
    --quiet         Suppress output

DESCRIPTION:
    Without [target], defaults to squashing the last 2 commits into 1 (intuitive for combining recent work
    from the *last commit* with the *previous commit*).
    HEAD goes back to target (like 'h back'), then commits changes from the target commits using the original HEAD's message.
    Non-destructive to uncommitted work.
    Pre-existing staged changes will be included - review with `hug ss` first.

EXAMPLES:
    hug h squash                   # Squash last 2 commits into 1
    hug h squash 3                 # Squash last 3 commits into 1
    hug h squash a1b2c3            # Keep a1b2c3 unchanged; Squash all commits above it into 1
    hug h squash -u                # Keep upstream tip unchanged; Squash local-only commits on top

SEE ALSO:
    hug h back    HEAD goes back only (no auto-commit)
    hug c         commit staged changes
EOF
}


upstream=false
target_arg=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) show_help; exit 0 ;;
    -u|--upstream) upstream=true; shift ;;
    --quiet) HUG_QUIET=T; shift ;;
    *) target_arg="$1"; shift ;;
  esac
done

if $upstream && [[ -n "$target_arg" ]]; then
  error "Cannot specify both -u/--upstream and a target (N|COMMIT)."
fi

check_git_repo

# Capture original HEAD message BEFORE any reset
original_head=$(git rev-parse HEAD)
original_message=$(git log -1 --format=%B "$original_head" 2>/dev/null || echo "Squashed commits")

if $upstream; then
  # handle_upstream_operation performs a read-only preview/confirmation and echoes the upstream commit.
  target=$(handle_upstream_operation "squashing" "y/N" "squash local-only commits")
  commits_to_squash=$(count_commits_in_range "$target" HEAD)
else
  target_spec=$(resolve_head_target "${target_arg:-}" 'HEAD~2')
  ensure_ancestor_of_head "$target_spec" "cannot squash onto it."
  target_commit=$(git rev-parse "${target_spec}^{commit}")
  log_range="$target_commit"..HEAD
  target_display=$(git rev-parse --short "$target_commit" 2>/dev/null || echo "$target_spec")
  commits_to_squash=$(count_commits_in_range "$target_commit" HEAD)
  if [ "$commits_to_squash" -eq 0 ]; then
    info "No commits to squash (already at $target_display)."
    exit 0
  fi
  commit_word="commit"
  if [ "$commits_to_squash" -gt 1 ]; then
    commit_word="commits"
  fi
  if [[ ${HUG_QUIET:-} != T ]]; then
    printf 'Commits to be squashed:\n' >&2
    git log --oneline "$log_range" | sed 's/^/  /' >&2
    affected_files=$(git log --name-only --pretty=format: "$log_range" | grep -v '^$' | sort -u | wc -l)
    printf '\nPreview: %d files affected in %d %s.\n' >&2 \
      "$affected_files" "$commits_to_squash" "$commit_word"
    printf '\nWill create new commit with message: "%s"\n' "$original_message" >&2
  fi
  if [[ -z "${target_arg:-}" || "${target_arg:-}" =~ ^[0-9]+$ ]]; then
    prompt_confirm "Proceed with squash of last $commits_to_squash $commit_word (hug back + hug c)? [y/N]: "
  else
    prompt_confirm "Proceed with squash up to $target_display (hug back + hug c)? [y/N]: "
  fi
  target="$target_commit"
fi

hug h back "$target" --quiet

# Check for staged changes (hug c will handle, but warn if none)
if [ -z "$(git diff --cached --name-only)" ]; then
  warn "No changes staged after reset. Skipping commit (empty squash?)."
  target_display=$(git rev-parse --short "$target" 2>/dev/null || echo "$target")
  info "HEAD moved to $target_display."
  exit 0
fi

# Commit with original message using hug c
hug c -m "$original_message"

target_display=$(git rev-parse --short "$target" 2>/dev/null || echo "$target")
summary_word="commit"
if [ "$commits_to_squash" -gt 1 ]; then
  summary_word="commits"
fi
info "Squash complete: $commits_to_squash $summary_word combined into 1 at $target_display with original message."
