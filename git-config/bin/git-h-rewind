#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done
set -euo pipefail  # Exit on error, undefined vars, pipe failures
# Part of the Hug tool suite

show_help() {
    cat << EOF
hug h rewind: Make HEAD walk back some commits while DISCARDING their changes. Uncommitted changes are DISCARDED.

USAGE:
    hug h rewind [N|COMMIT] [-u, --upstream] [--quiet] [--force]

OPTIONS:
    -u, --upstream  Sets target to upstream remote tip after read-only preview/confirmation (discards everything after remote tip; no fetch)
    --quiet         Suppress output (sets HUG_QUIET=T)
    --force         Skip confirmation prompts (use with caution; highly destructive)

DESCRIPTION:
    Moves HEAD back to target (full clean). With -u, runs a read-only preview/confirmation before discarding local-only commits and uncommitted changes to sync with remote tip.

EXAMPLES:
    # Uncommitted changes are DISCARDED in all examples below:
    hug h rewind -u              # Moves HEAD back to upstream
    hug h rewind 3               # Moves HEAD back last 3 commits
    hug h rewind a1b2c3          # Moves HEAD back after specified commit
    hug h rewind 3 --force       # Skip confirmation (dangerous!)

SEE ALSO:
    hug h back    Make HEAD walk back some commits while keeping their changes staged
EOF
}

# Parse common flags (--quiet, --force, -h|--help)
eval "$(parse_common_flags "$@")"

# Parse custom flags
upstream=false
target_arg=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -u|--upstream) upstream=true; shift ;;
    *) target_arg="$1"; shift ;;
  esac
done

if $upstream && [[ -n "$target_arg" ]]; then
  error "Cannot specify both --upstream and a target (N|COMMIT)."
fi

check_git_repo

if $upstream; then
  # handle_upstream_operation performs a read-only preview/confirmation and echoes the upstream commit.
  target=$(handle_upstream_operation "rewinding")
  if [[ -z "${target:-}" ]]; then
    exit 0
  fi
else
  target=$(resolve_head_target "${target_arg:-}" 'HEAD~1')
  handle_standard_operation "rewinding" "$target" false

  printf '\n⚠️  This is PERMANENT and cannot be undone!\n' >&2
  if [[ ${HUG_FORCE:-} != true ]]; then
    read -p 'Type "rewind" to confirm: ' confirm >&2
    [ "$confirm" = "rewind" ] || { info "Cancelled."; exit 1; }
  fi
fi

printf 'Rewinding to %s...\n' "$target" >&2
git reset --hard "$target"
printf 'Rewind complete. Repository is now at %s\n' "$(git rev-parse --short "$target")" >&2
