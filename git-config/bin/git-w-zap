#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for f in hug-common hug-git-kit; do . "$CMD_BASE/../lib/$f"; done # Load common constants and functions
set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Part of the Hug tool suite

show_help() {
  cat <<'EOF'
Usage: hug w zap [OPTIONS] <path> [<path>...]

Wipe tracked changes and purge untracked / ignored files for the specified paths.

Options:
  -f, --force      Skip confirmation prompts
      --dry-run    Show what would be affected without applying changes
  -h, --help       Show this help

Semantics:
  • Performs a full factory reset on the provided paths of the working directory so that they match HEAD verbatim.
  • ALL uncommitted changes on those paths (staged or unstaged) will be wiped (as in `hug wipe <path>`).
  • ALL untracked and ignored files on those paths will be gone for good (as in `hug purge -ui <path>`).
  • It's the same as `hug wipe <path>; hug purge -ui <path>`.
  • Requires at least one path; use `hug w zap-all` to affect ALL files in the working directory.
EOF
}

force=false
dry_run=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f|--force)
      force=true
      shift
      ;;
    --dry-run)
      dry_run=true
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      opt=$1
      shift
      # expand combined short flags (e.g., -us)
      opt=${opt#-}
      for ((i=0; i<${#opt}; ++i)); do
        char=${opt:i:1}
        case "$char" in
          *)
            error "unknown option: -$char"
            show_help >&2
            exit 2
            ;;
        esac
      done
      ;;
    *)
      break
      ;;
  esac
done

if [[ $# -lt 1 ]]; then
  error "this command requires at least one path (or use 'hug w zap-all')"
  show_help >&2
  exit 2
fi

# Early exit if not in Git repo
check_git_repo

paths=("$@")

# Separate tracked/changed files from untracked/ignored files
declare -a tracked_paths=()
declare -a untracked_paths=()

while IFS= read -r -d '' entry; do
  [[ -z "$entry" ]] && continue
  status=${entry:0:2}
  path=${entry:3}
  case "$status" in
    '??'|'!!')
      # Untracked or ignored
      untracked_paths+=("$path")
      ;;
    *)
      # Tracked file (modified, staged, etc.)
      tracked_paths+=("$path")
      ;;
  esac
done < <(git status --porcelain=v1 --ignored=matching -z -- "${paths[@]}" 2>/dev/null || true)

# Convert paths to be relative to current directory before passing to sub-commands
# (git status returns repo-root-relative paths, but wipe/purge expect current-dir-relative)
convert_to_relative_paths tracked_paths
convert_to_relative_paths untracked_paths

# Wipe tracked changes
if [[ ${#tracked_paths[@]} -gt 0 ]]; then
  wipe_cmd=(hug w wipe)
  $dry_run && wipe_cmd+=(--dry-run)
  $force && wipe_cmd+=(-f)
  wipe_cmd+=(-- "${tracked_paths[@]}")
  "${wipe_cmd[@]}"
fi

# Purge untracked/ignored files
if [[ ${#untracked_paths[@]} -gt 0 ]]; then
  purge_cmd=(hug w purge)
  $dry_run && purge_cmd+=(--dry-run)
  purge_cmd+=(-u -i -- "${untracked_paths[@]}")
  "${purge_cmd[@]}"
fi

exit 0
